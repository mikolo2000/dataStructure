Question: Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

 

Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:

Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.
 

Constraints:

1 <= words.length <= 500
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
k is in the range [1, The number of unique words[i]]


solution:  To solve this problem, I used a Min Heap to track the top k frequent words. First, I used a Map to count occurrences of each word. Then, I inserted each word-frequency pair into a Min Heap, ensuring that the heap maintains only the k most frequent elements. The heap is structured to prioritize elements with lower frequency, and in case of a tie, words are sorted in reverse lexicographical order to ensure correct order when popping elements. This way, the least relevant elements get removed first when the heap exceeds k elements.

After constructing the heap, I extracted elements one by one, adding them to the result list. Since the least frequent word gets removed first, the final list needs to be reversed to maintain the correct order of most frequent words first. 