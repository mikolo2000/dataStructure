Question: There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.




Solution: To solve this problem, I used Topological Sorting with Kahn’s Algorithm to determine a valid order of courses. I first built an adjacency list to represent course dependencies and an in-degree array to track how many prerequisites each course has. I populated the adjacency list, where each prerequisite points to its dependent course, and updated the in-degree array accordingly. Courses with an in-degree of 0 were added to a queue, as they can be taken immediately.

Next, I processed the queue using BFS, removing courses one by one and appending them to the courseOrder list. Each time a course was taken, I reduced the in-degree of its dependent courses, and if any course’s in-degree reached 0, I added it to the queue. This ensured that courses were processed in the correct order. If all numCourses were added to courseOrder, it meant a valid order existed, and I returned it. Otherwise, a cycle was detected, so I returned an empty array. 